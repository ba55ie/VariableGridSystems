/* ------- VARIABLES ------- */

// user variables grid system
$columns: 6;
$multiplier: 1.62;
$gutter-width: 26px;
$minimum-column-width: 5;

$bleed: false; //not yet working!

// system variables
$class-prefix: cell;
$total-width: 100;
$root-column: 0;
$rest-width: $total-width - ($columns * $minimum-column-width);

// breakpoints
$breakpoints: (
  xs: 32rem,
  s: 48rem,
  m: 72rem,
  l: 96rem,
  xl: 102rem
);

/*
DEFINE THE DEFAULT ROW & COLUMN
*/
.container {
    max-width: 1400px;
    margin: 0 auto;
    overflow-x: hidden;
}

.grid {
    padding: 0 ($gutter-width/2);
    @if($bleed == false) {
        margin: 0 -$gutter-width/2;
    }
}

.row {
    display: block;
    position: relative;
    clear:both;
    margin: 0 (-$gutter-width/2);

    
    .cell {
        position: relative;
        box-sizing: border-box;
        min-width: 0;
        padding: 0;
        margin: 0 ($gutter-width/2);
        float: left;
    }
}

/* ------- FUNCTIONS ------- */
@function power-of($base: $base, $exponent: $exponent) {
    // calculates the power of the given base and exponent
    $return-value: 0;
    @if ($exponent == 0) {
        // when the exponent is zero, the power is always 1
        $return-value: 1;
    } @else if ($exponent == 1) {
        // when the exponent is 1, the power is always the same as the base
        $return-value: $base;
    } @else {
        // calculate the power with a loop
        $return-value: $base;
        @for $i from 2 through $exponent {
            $return-value: $return-value * $base;
        }
    }
    @return $return-value;
}
@function rem($pixels) {
    @return #{$pixels*16}px;
}

/* ------- MIXINS ------- */
@mixin break($size) {  
    @media (min-width: map-get($breakpoints, $size)) {
        @content;
    }
}
@mixin calc($property, $expression) { 
  #{$property}: -webkit-calc(#{$expression}); 
  #{$property}: -moz-calc(#{$expression});
  #{$property}: calc(#{$expression}); 
} 

/* ------- CALCULATIONS ------- */
$root-column: ($multiplier - 1 ) * ($rest-width / (power-of($multiplier , $columns) - 1));

/* ------- GENERATE CSS ------- */
@for $i from 1 through $columns {
    // calculate the current column width based on the first column
    $current-column-width: $minimum-column-width + ($root-column * (power-of($multiplier, ($i - 1))));

    .#{$class-prefix}--#{$i} {
        $width-var: $current-column-width * 1%;
        @include calc(width, $width-var + " - " + $gutter-width);
    }

    @if($i < $columns) {
        //set the initial span width: equal to the current column
        $span-width: $current-column-width;

        @for $j from $i + 1 through $columns {
            //add every next column to the span width
            $span-width: $minimum-column-width + ($span-width + $root-column * (power-of($multiplier, $j - 1)));

            .#{$class-prefix}--#{$i}-#{$j} {
                $width-var: $span-width * 1%;
                @include calc(width, $width-var + " - " + $gutter-width);
            }
        }
    }
}

@each $key, $value in $breakpoints {
    @for $i from 1 through $columns {
        // calculate the current column width based on the first column
        $current-column-width: $minimum-column-width + ($root-column * (power-of($multiplier, ($i - 1))));

        .#{$class-prefix}--#{$key}-#{$i} {
            @include break($key) {
                $width-var: $current-column-width * 1%;
                @include calc(width, $width-var + " - " + $gutter-width);
            }
        }

        @if($i < $columns) {
            //set the initial span width: equal to the current column
            $span-width: $current-column-width;

            @for $j from $i + 1 through $columns {
                //add every next column to the span width
                $span-width: $minimum-column-width + ($span-width + $root-column * (power-of($multiplier, $j - 1)));

                .#{$class-prefix}--#{$key}-#{$i}-#{$j} {
                    @include break($key) {
                        $width-var: $span-width * 1%;
                        @include calc(width, $width-var + " - " + $gutter-width);
                    }
                }
            }
        }
    }
}