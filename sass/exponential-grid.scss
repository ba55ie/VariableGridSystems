@import "functions";
@import "mixins";
@import "variables";

/* ------- VARIABLES ------- */
$class-prefix: cell;
$total-width: 100;
$root-column: 0;
$rest-width: $total-width - ($columns * $minimum-column-width);

// breakpoints
$breakpoints: (
  s: 48rem,
  m: 72rem,
  l: 96rem
);

/*
DEFINE THE DEFAULT ROW & COLUMN
*/
.grid {
    padding: 0 ($gutter-width/2);
    
    @if($bleed) {
        margin: 0 ($gutter-width/2);
    }@else{
        margin: 0 (-$gutter-width/2);
    }
}

.row {
    display: block;
    clear:both;
    margin: 0 (-$gutter-width/2);
    
    .cell {
        box-sizing: border-box;
        position: relative;
        padding: 0 ($gutter-width/2);
        float: left;
    }

    .#{$class-prefix}--no-offset {
        margin-left: 0;
    }

    @each $key, $value in $breakpoints {
        .#{$class-prefix}--#{$key}-no-offset {
            margin-left: 0;
        }
    }
}

/* ------- CALCULATIONS ------- */
$root-column: ($multiplier - 1 ) * ($rest-width / (power-of($multiplier , $columns) - 1));

/* ------- GENERATE CSS ------- */
@for $i from 1 through $columns {
    // calculate the current column width based on the first column
    $current-column-width: $minimum-column-width + ($root-column * (power-of($multiplier, ($i - 1))));
    $width-var: $current-column-width * 1%;

    //define column
    .#{$class-prefix}--#{$i} {
        width: #{$width-var};
    }

    //define offset
    .#{$class-prefix}--offset-#{$i} {
        margin-left: #{$width-var};
    }

    @if($i < $columns) {
        //set the initial span width: equal to the current column
        $span-width: $current-column-width;

        @for $j from $i + 1 through $columns {
            //add every next column to the span width
            $span-width: $minimum-column-width + ($span-width + $root-column * (power-of($multiplier, $j - 1)));
            $width-var: $span-width * 1%;

            .#{$class-prefix}--#{$i}-#{$j} {
                width: #{$width-var};
            }

            .#{$class-prefix}--offset-#{$i}-#{$j} {
                margin-left: #{$width-var};
            }
        }
    }
}

//repeat procedure for media devices (fix-me: create more efficient way)
@each $key, $value in $breakpoints {
    @for $i from 1 through $columns {
        // calculate the current column width based on the first column
        $current-column-width: $minimum-column-width + ($root-column * (power-of($multiplier, ($i - 1))));

        .#{$class-prefix}--#{$key}-#{$i} {
            @include break($key) {
                $width-var: $current-column-width * 1%;
                width: #{$width-var};
            }
        }

        .#{$class-prefix}--offset-#{$key}-#{$i} {
            @include break($key) {
                $width-var: $current-column-width * 1%;
                margin-left: #{$width-var};
            }
        }

        @if($i < $columns) {
            //set the initial span width: equal to the current column
            $span-width: $current-column-width;

            @for $j from $i + 1 through $columns {
                //add every next column to the span width
                $span-width: $minimum-column-width + ($span-width + $root-column * (power-of($multiplier, $j - 1)));
                $width-var: $span-width * 1%;

                .#{$class-prefix}--#{$key}-#{$i}-#{$j} {
                    @include break($key) {
                        width: #{$width-var};
                    }
                }
                .#{$class-prefix}--offset--#{$key}-#{$i}-#{$j} {
                    margin-left: #{$width-var};
                }
            }
        }
    }
}