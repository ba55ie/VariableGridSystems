/* ------- VARIABLES ------- */

// user variables grid system
$columns: 6;
$multiplier: 2;
$gutter-width: 1rem;
$bleed: false;

$minimum-column-width: 10; //not yet working!

// system variables
$class-prefix: cell;
$total-width: 189;
$first-column-width: 0;

// breakpoints
$breakpoints: (
  xs: 32rem,
  s: 48rem,
  m: 72rem,
  l: 96rem,
  xl: 102rem
);

/*
DEFINE THE DEFAULT ROW & COLUMN
*/
.container {
    max-width: 1400px;
    margin: 0 auto;
    overflow-x: hidden;
}

.grid {
    padding: 0 ($gutter-width/2);
    @if($bleed == false) {
        margin: 0 -$gutter-width/2;
    }
}

.row {
    display: block;
    position: relative;
    clear:both;
    margin: 0 (-$gutter-width/2);

    
    .cell {
        box-sizing: border-box;
        position: relative;
        padding: 0 ($gutter-width/2);
        margin: 0;
        float: left;
    }
}

/* ------- FUNCTIONS ------- */
@function power-of($base: $base, $exponent: $exponent) {
    // calculates the power of the given base and exponent
    $return-value: 0;
    @if ($exponent == 0) {
        // when the exponent is zero, the power is always 1
        $return-value: 1;
    } @else if ($exponent == 1) {
        // when the exponent is 1, the power is always the same as the base
        $return-value: $base;
    } @else {
        // calculate the power with a loop
        $return-value: $base;
        @for $i from 2 through $exponent {
            $return-value: $return-value * $base;
        }
    }
    @return $return-value;
}

/* ------- CALCULATIONS ------- */
$first-column-width: $total-width / (power-of($multiplier , $columns) - 1);

/* ------- GENERATE CSS ------- */
@for $i from 1 through $columns {
    // calculate the current column width based on the first column
    $current-column-width: $first-column-width * (power-of($multiplier, ($i - 1)));
    @debug "single column "+ $i + ":     " + $current-column-width;

    .#{$class-prefix}--#{$i} {
        width: $current-column-width * 1%;
    }

    @if($i < $columns) {
        //set the initial span width: equal to the current column
        $span-width: $current-column-width;
        @for $j from $i + 1 through $columns {
            //add every next column to the span width
            $span-width: ($span-width + $first-column-width * (power-of($multiplier, $j - 1)));
            @debug "merge cells:  " + $i + " - " + $j + ": " + $span-width;

            .#{$class-prefix}--#{$i}-#{$j} {
                width: $span-width * 1%;
            }
        }
    }
}

@debug "total: " + ($first-column-width * (power-of($multiplier, $columns) - 1));